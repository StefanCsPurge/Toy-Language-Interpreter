PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v2
(Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
v2 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v3
(int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
v2 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,2)
(new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v2,3)
(new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (2,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v3,4)
(newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (2,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
newBarrier(cnt,rH(v2))
(fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1)))))
(fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2))))))
(await(cnt); print(rH(v3)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
await(cnt)
(wH(v1, rH(v1)*10); print(rH(v1)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(await(cnt); print(rH(v3)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
await(cnt)
(wH(v1, rH(v1)*10); print(rH(v1)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
await(cnt)
print(rH(v3))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
await(cnt)
(wH(v1, rH(v1)*10); print(rH(v1)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
await(cnt)
(wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
await(cnt)
print(rH(v3))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 2
------------------
@ Execution stack: 
await(cnt)
(wH(v1, rH(v1)*10); print(rH(v1)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
await(cnt)
(wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 1
------------------
@ Execution stack: 
print(rH(v3))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); print(rH(v1)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 1
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
print(rH(v1))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v2, rH(v2)*10)
(wH(v2, rH(v2)*10); print(rH(v2)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 30
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v2, rH(v2)*10); print(rH(v2)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 30
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 2
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
20
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 30
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v2, rH(v2)*10)
print(rH(v2))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
20
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 30
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
print(rH(v2))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
20
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 300
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
20
300
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 300
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v2
(Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v3; (int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
v2 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v3
(int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
v2 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,2); (new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,2)
(new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v2,3); (new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v2,3)
(new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (0,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v3,4); (newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (2,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v3,4)
(newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (2,int)
v3 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(newBarrier(cnt,rH(v2)); (fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
newBarrier(cnt,rH(v2))
(fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))); (fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((await(cnt); (wH(v1, rH(v1)*10); print(rH(v1)))))
(fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))); (await(cnt); print(rH(v3))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(await(cnt); (wH(v1, rH(v1)*10); print(rH(v1))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2))))))
(await(cnt); print(rH(v3)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
await(cnt)
(wH(v1, rH(v1)*10); print(rH(v1)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(await(cnt); print(rH(v3)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
await(cnt)
(wH(v1, rH(v1)*10); print(rH(v1)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(await(cnt); (wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
await(cnt)
print(rH(v3))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
await(cnt)
(wH(v1, rH(v1)*10); print(rH(v1)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
await(cnt)
(wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
await(cnt)
print(rH(v3))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); print(rH(v1)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
await(cnt)
(wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 1
------------------
@ Execution stack: 
print(rH(v3))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
print(rH(v1))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v2, rH(v2)*10); (wH(v2, rH(v2)*10); print(rH(v2))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 2
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 1
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v2, rH(v2)*10)
(wH(v2, rH(v2)*10); print(rH(v2)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 3
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 2
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
20
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 30
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v2, rH(v2)*10); print(rH(v2)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
20
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 30
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v2, rH(v2)*10)
print(rH(v2))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
20
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 30
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
print(rH(v2))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
20
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 300
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


@ Program state ID: 3
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
v2 --> (2,int)
v3 --> (3,int)
----------------
@ Output stream: 
4
20
300
-------------
@ File table: 
-------
@ Heap:
1 --> 20
2 --> 300
3 --> 4
----------------
@ BarrierTable:
1 --> 3 w/ threads: [2, 1, 3]


