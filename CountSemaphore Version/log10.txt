PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
print(rH(v1)-1)
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*2)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
print(rH(v1)-1)
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*2)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
print(rH(v1)-1)
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*2)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
print(rH(v1)-1)
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*2)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 4
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 4
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 4
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 4
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 4
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 4
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 4
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 4
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 4
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 4
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 4
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 5
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 4
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 5
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 4
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 5
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 6
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 4
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 5
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 6
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 4
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 5
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 6
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 4
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 5
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 6
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 4
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 5
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 6
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [5]


@ Program state ID: 4
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 5
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 6
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 4
------------------
@ Execution stack: 
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [4]


@ Program state ID: 6
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [4]


@ Program state ID: 4
------------------
@ Execution stack: 
print(rH(v1)-1)
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [4]


@ Program state ID: 6
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [4]


@ Program state ID: 4
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [4]


@ Program state ID: 6
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [4]


@ Program state ID: 4
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [6]


@ Program state ID: 6
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [6]


@ Program state ID: 6
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [6]


@ Program state ID: 6
------------------
@ Execution stack: 
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [6]


@ Program state ID: 6
------------------
@ Execution stack: 
wH(v1, rH(v1)*2)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [6]


@ Program state ID: 6
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [6]


@ Program state ID: 6
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [6]


@ Program state ID: 6
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [6]


@ Program state ID: 6
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
print(rH(v1)-1)
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*2)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


PROGRAM EXECUTION START ---------------------------------------------------------------

@ Program state ID: 1
------------------
@ Execution stack: 
(Ref(int) v1; (int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
Ref(int) v1
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(int cnt; (new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
int cnt
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(new(v1,1); (createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
new(v1,1)
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (0,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(createSemaphore(cnt,rH(v1)); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
createSemaphore(cnt,rH(v1))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 0
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))); (fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))))
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))); (acquire(cnt); (print(rH(v1)-1); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
fork((acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))))
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(acquire(cnt); (print(rH(v1)-1); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
(acquire(cnt); (wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 1
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 2
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [2]


@ Program state ID: 1
------------------
@ Execution stack: 
acquire(cnt)
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 2
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


@ Program state ID: 1
------------------
@ Execution stack: 
(print(rH(v1)-1); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
print(rH(v1)-1)
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 3
------------------
@ Execution stack: 
acquire(cnt)
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [1]


@ Program state ID: 1
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*10); (wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt))))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*10)
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 10
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(wH(v1, rH(v1)*2); (print(rH(v1)); release(cnt)))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
wH(v1, rH(v1)*2)
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 100
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
(print(rH(v1)); release(cnt))
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
print(rH(v1))
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
release(cnt)
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: [3]


@ Program state ID: 3
------------------
@ Execution stack: 
---------------
@ Symbol table: 
cnt --> 1
v1 --> (1,int)
----------------
@ Output stream: 
10
9
200
-------------
@ File table: 
-------
@ Heap:
1 --> 200
----------------
@ SemaphoreTable:
1 --> 1 Threads: []


